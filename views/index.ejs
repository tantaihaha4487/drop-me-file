<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="icon" href="/favicon.ico">
    <title>Drop me file.</title>
    <style>
        .dark-mode {
            background-color: #1a202c;
            color: white;
        }
    </style>
</head>
<body class="dark-mode w-screen h-screen overflow-hidden">
    <div class="container flex w-autoitems-center justify-center p-6 m-auto">
        <svg width="40px" height="40px" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" fill="#ffffff" stroke="#ffffff"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <defs> <style>.cls-1,.cls-2{fill:none;stroke:#ffffff;stroke-linecap:round;stroke-width:1.5px;}.cls-1{stroke-linejoin:bevel;}.cls-2{stroke-linejoin:round;}</style> </defs> <g id="ic-folder-download"> <line class="cls-1" x1="17" y1="11.93" x2="17" y2="22.07"></line> <path class="cls-1" d="M14,19.31l2.58,2.57a.62.62,0,0,0,.89,0L20,19.35"></path> <path class="cls-2" d="M8,20.3H4a2,2,0,0,1-2-2V7.3H20a2,2,0,0,1,2,2"></path> <path class="cls-2" d="M2,11.1v-6a1,1,0,0,1,.91-1h8.86a.89.89,0,0,1,.64.29L14,7.3"></path> </g> </g></svg>
        <h1 class="text-4xl font-bold text-white ml-3">
            Drop me file.
        </h1>
   </div>

    <div class="container h-screen w-screen flex items-center justify-center m-auto">
        <form id="upload-form">
            <label id="dropzone" for="dropzone-file" class="flex flex-col items-center justify-center w-full h-96 px-12 sm:px-48 lg:px-72 xl:px-96 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-800 dark:hover:bg-bray-800 dark:bg-gray-700 hover:bg-gray-700 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600 ease-linear duration-150">
                <div class="flex flex-col items-center justify-center pt-5 pb-6">
                    <svg class="w-10 h-10 mb-3 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path></svg>
                    <p class="mb-2 text-sm text-gray-300 dark:text-gray-400"><span class="font-semibold">Click to upload</span> or drag and drop</p>
                    <p class="text-xs text-gray-500 dark:text-gray-400">Any file MAX 100 MB.</p>
                </div>
                <input type="file" id="dropzone-file" name="file" class="hidden">
            </label>
        </form>
    </div>
   </div>

    <div class="fixed bottom-0 p-12 left-1/2 transform -translate-x-1/2" id="notifications"></div>


   <script>
    const dropzone = document.getElementById('dropzone');
    const dropzoneFile = document.getElementById('dropzone-file');

    dropzone.addEventListener('dragover', (event) => {
        event.preventDefault();
        dropzone.classList.add('bg-blue-800');
    });

    dropzone.addEventListener('dragleave', (event) => {
        event.preventDefault();
        dropzone.classList.remove('bg-blue-800');
    });

    dropzone.addEventListener('drop', async (event) => {
        event.preventDefault();
        dropzone.classList.remove('bg-blue-800');
        const files = event.dataTransfer.files;

        console.log(files);
        
        if (files.length > 0) {
            dropzoneFile.files = files;
            for (let i = 0; i < files.length; i++) {
                await handleFileUpload(files[i]);
            }
        }
    });

    dropzoneFile.addEventListener('change', async (event) => {
        const files = event.target.files;
        for (let i = 0; i < files.length; i++) {
            await handleFileUpload(files[i]);
        }
    });

    
    const notifications = document.querySelector('#notifications');


    async function handleFileUpload(file) {
        const formData = new FormData();
        formData.append('file', file);
        const response = await fetch('/upload', {
            method: 'POST',
            body: formData
        });
        const data = await response.json();
        notifications.innerHTML += `
            <div class="container flex items-center justify-center w-full h-12 bg-green-500 text-white px-10 my-3 transition ease-in-out duration-300 animate-bounce rounded">
                <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>
                <p id="notification-text">${data.message}</p>
            </div>
        `;

        setTimeout(() => {
            const notificationElements = notifications.children;
            for (let element of notificationElements) {
                element.classList.add('opacity-0');
                setTimeout(() => {
                    element.remove();
                }, 1000);
            }
        }, 3000);
    }
</script>
</body>
</html>